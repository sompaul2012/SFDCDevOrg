<apex:page controller="cms.CreateContentController" extensions="cms.RecordDetailController" showHeader="false" sidebar="false" cache="false" title="Orchestra CMS" standardStylesheets="false">
	<head>
	
		<apex:stylesheet value="{!URLFOR($Resource.cms__jqueryui, '/css/ocms-min.css')}" />
		<apex:stylesheet value="{!URLFOR($Resource.cms__jqueryui, '/css/ocms.tableeditor.css')}" />
		<apex:stylesheet value="{!URLFOR($Resource.cms__jqueryui, '/css/ocms.fieldselector.css')}" />
        <apex:includeScript value="{!URLFOR($Resource.cms__OrchestraCMSUI, '/editor/TableEditor.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.cms__OrchestraCMSUI, '/widget/JQueryData.js')}" />

		<style type="text/css">
			.detail-field{
				border: 1px solid grey; 
				background-color: #efefef;
				padding: 5px;
			}
		.help-text{
				width: 900px;
			}
		/* we need a min-height here so the hover actions can show when we have mirrored a new "empty" text field! */	
		div.tableitem {
				min-height: 12px;
		}
		</style>

		<script type="text/javascript">

			jQuery(document).data('removeBtn', '{!URLFOR($Resource.CmsImages,'/btn_remove.png')}');
			jQuery(document).data('editBtn', '{!URLFOR($Resource.CmsImages,'/btn_edit.png')}');
			jQuery(document).data('handle', '{!URLFOR($Resource.jqueryui, '/css/images/cleardot.gif')}');


			$(document).ready(function(){
			
				var self = this;
				self.container = $('div.record-detail-editor');
			
				ce.content_editor('registerSaveFunction', function(){
					var attributes = new Array();
					attributes.push({"name":"SObjectType", "value":$('#SObjectType').val(), "type":"Text", "lang":""});
					attributes.push({"name":"TableDefinition", "value":$('#tablelayout').table_editor('serialize'), "type":"Text", "lang":""});
					return attributes; 
	 			}); 

				// what is current user allowed to do?
				var readOnly = true, translationOnly = false, fullEdit = false;
			
		        // what can this user do?
	            if ('{!multilingualAccessLevel}' === 'EDIT' && {!!readOnlyCollaborator}) {
					readOnly = false;
	            	translationOnly = false;
	            	fullEdit = true;
	            } else if ('{!multilingualAccessLevel}' === 'TRANSLATE' && {!!readOnlyCollaborator}) {
					readOnly = false;
	            	translationOnly = true;
	            	fullEdit = false;
	            }
	            
	            var languageId = '{!JSENCODE(languageInUse.Id)}';
	            

	            // for side-by-side editing set up our action mirroring
	            self.container.action_mirror({
	            	"bMultilingual":	{!showLanguages},					// actions will only get mirrored when the bMultilingual flag is true!
	            	"mirrorActions":	{
											 "delete":			_mirrorDelete
											,"newTextField":	_mirrorNewTextField
											,"newDetailField":	_mirrorNewDetailField
											,"moveField":		_mirrorMoveField
											,"useNewSFObject":	_mirrorUseNewSFObject	 
						            	},
	            	"context":			self,								// context for handler routines to run in
	            	"suffix":			"recordStyleDetail"					// only need this when container element doesn't have an Id attribute
	            });
	            
	            // get a handle to our action mirror widget so we can call its "action" mirror method directly
	            self.mirror = self.container.action_mirror('instance');
		         
			
		    	//setup the table editor
				$('#tablelayout').table_editor({
					accept: '.tableitem, .ocms-field-item',
					
					defaultCellWidth: 200,
					defaultCellHeight:  30,
					defaultCellPadding: 4,
					bMultilingual: {!showLanguages},

					// received action is ALWAYS interactive!
					received: function(event, ui, cell, te) {

						//check if the cell already has content
						if(cell.find('.tableitem').length > 0) {
							$('<div></div>').ocmsPopupMessage({
								message: 'This cell already has content'
							});

							return;
						}


						if(ui.draggable.hasClass('ocms-field-item')) {
							_createNewField(event, ui, cell, te);
	 					} else {
	 						//this is an existing item we're just moving it
							var loading = $('<div id="loading"><img width="32px" height="32px" src="'+($(document).data('loading_indicator'))+'" /></div>');
							cell.append(loading);
	
							var draggable_id = ui.draggable.attr('Id');
	
	 						var attributes = new Array();
							attributes.push({"name":"Column", "value":cell.data('col'), "type":"Integer", "lang":""});
							attributes.push({"name":"Row", "value":cell.data('row'), "type":"Integer", "lang":""});

	 						var content = {"content_id":draggable_id, "content_type":"DetailField", "parent_id": "{!content.Id}"};
	 						$.ocms.saveContent(content, attributes, $(document).data('sname'), function(response){
								loading.remove();
								cell.append(ui.draggable);
								te.refresh();
								
								var theCell = {"row": cell.data('row'), "col": cell.data('col')};
								self.mirror.action('moveField', {"theCell": theCell, "fieldId": draggable_id});
								
							},
							'{!token}');
	 					}

					}, // received

					afterCellsRemoved: function(cells, interactive) {
						
						if (interactive) {	// if this was triggered by a mirroring action don't update host a second time
							var ids = new Array();
							var items = new Array();
							for (var i = 0; i < cells.length; ++i) {
								var elements = cells[i].find('.tableitem');
								for (var j = 0; j < elements.length; ++j) {
									ids.push(elements[j].id);
								}
							}
	
							if (ids.length > 0) {
								$.ocms.deleteContentSet(ids, function(json){
								}, '{!token}');
							}
						}
					},

					afterCellsUpdated: function(cells, interactive) {
						if (interactive) {	// if this was triggered by a mirroring action don't update host a second time
							var items = new Array();
	
							if (cells.length > 0) {
								for (var i = 0; i < cells.length; ++i) {
	
									var row = cells[i].data('row');
									var col = cells[i].data('col');
	
									var elements = cells[i].find('.tableitem');
									for (var j = 0; j < elements.length; ++j) {
	
										var item = {};
										item['id'] = elements[j].id;
										item['attributes'] = new Array();
										item['attributes'].push({"name":"Row","value":row,"type":"Integer", "lang":""});
										item['attributes'].push({"name":"Column","value":col,"type":"Integer", "lang":""});
										items.push(item);
									}
								}
							}
	
							if (items.length > 0) {
								jQuery.ocms.saveContentGroup(items, null, '{!token}');
							}
						}
					},

					afterCellsCleared: function(items, interactive) {
						if (interactive) {	// if this was triggered by a mirroring action don't update host a second time
							var ids = new Array();
	
							for(var i=0 ; i < items.length ; ++i) {
								ids.push($(items[i]).attr('id'));
							}
	
							jQuery.ocms.deleteContentSet(ids, null, '{!token}');
						}

					},

					saveProperties: function(properties, interactive) {

						if (interactive) {	// if this was triggered by a mirroring action don't update host a second time
							var attributes = new Array()

							attributes.push({"name":"TableDefinition", "value":properties['table'], "type":"Text", "lang":""});
	
	
							$.ocms.saveContent({"name":'{!JSENCODE(content.Name__c)}', "content_id":"{!content.Id}","content_type":"Data","parent_id":null},
								attributes,
								'{!JSENCODE(Content.Site_Name__c)}',
								function() {
								} ,
								'{!token}'
							);
						}	// if interactive

					},

					// table editor is only enabled if user has full edit permission and form is not published
					disabled: {!disableAll} || readOnly || translationOnly,
					
					// enabled flag controls the table editor's setupTableDraggables behaviour -- we want to set it false if either "disableAll" or "readOnly" is true
					enabled: !({!disableAll} || readOnly)

				});	// setup of table editor
				
			

				//setup the SObject Type selector to select fields from
				if(!{!disableAll} && fullEdit) {

					var field_list = $('#elementOptionAccordion').ocmsDraggableFieldList({
						SObjectType: '{!SObjectType}',
						token: '{!token}',
						disabled: {!disableAll} || !fullEdit
					});

					$('#SObjectType').change(function(){

						if($('#tablelayout').find('.tableitem').length > 0) {
							$('<div></div>').ocmsShowConfirmationDlg({
								message: 'Changing the object type will remove all existing fields from the detail table. Are you sure you want to do this?',
								onOK: function(dialog, cb) {
									var newObj = $('#SObjectType').val();
									$('#tablelayout').table_editor('clearCells');
									field_list.ocmsDraggableFieldList('setSObjectType', newObj);
									dialog.closeDialog();
									ce.content_editor('saveContent',false,false );
									// go mirror to the other frame
									self.mirror.action('useNewSFObject', {"SObjectType":newObj});
								},
								onCANCEL: function(dialog, cb) {
									$('#SObjectType').val(field_list.ocmsDraggableFieldList('getSObjectType'));
									dialog.closeDialog();
								}
							});
						} else {
							var newObj = $('#SObjectType').val();
							field_list.ocmsDraggableFieldList('setSObjectType', newObj);
							ce.content_editor('saveContent',false,false );
							self.mirror.action('useNewSFObject', {"SObjectType":newObj});
						}

					});


					// find the text field and setup edit and delete handlers for them
					var tablefields = $('#tablelayout').find('.tableitem');
					_setupDelete(tablefields.find('.delete'))
					_setupEdit(tablefields.find('.edit'));

				} else if (!{!disableAll} && translationOnly) {
					_setupEdit($('#tablelayout').find('.tableitem').find('.edit'));
					$('#SObjectType').prop('disabled', true);
				} else {
					$('#SObjectType').prop('disabled', true);
				} // set up of the SObjectType Selector
				
				
				function _mirrorUseNewSFObject(mObject) {
					// note that "clearcells" is mirrored by the table editor
					// so all we need to do here is mirror the selection of the new SObjectType
	
					// set the drop down box
					var SObjectType = mObject.SObjectType;
					$('#SObjectType').val(SObjectType);
		
					// now set our accordian control
					field_list.ocmsDraggableFieldList('setSObjectType', SObjectType);
					
				} // _mirrorUseNewSFObject
				
				
				
				// got a new element dragged on to our table!
				function _createNewField(event, ui, cell, te) {
					var new_field = $('<div class="tableitem">'+
	  								  	'<div class="tableitem-hover">'+
											'<div class="ocms-actions"><a onclick="return false;" href="#" class="delete" ><img title="Remove Item" alt="Remove" border="0" src="'+$(document).data('removeBtn')+'" /></a></div>'+
											'<div class="tableitem-handle" style="border: none;"><span class="ui-icon ui-icon-arrow-4"></span></div>'+
										'</div>'+
										'<div class="tableitem-cell sample"></div>'+
										'<div style="clear: both;"></div>'+
	 								'</div>');
		 					
	 				var attributes = new Array();	
					attributes.push({"name":"Column", "value":cell.data('col'), "type":"Integer", "lang":""});
					attributes.push({"name":"Row", "value":cell.data('row'), "type":"Integer", "lang":""});

					var loading = $('<div id="loading"><img width="32px" height="32px" src="'+($(document).data('loading_indicator'))+'" /></div>');
					cell.append(loading);

					var draggable_id = ui.draggable.attr('Id');

					if(draggable_id == 'Text') {

						new_field.ocmsTextField({
							saveText: function(text) {	// text field - language attribute should not be set here
								attributes.push({"name":"Type", "value":"Text", "type":"Text"});
								attributes.push({"name":"Content", "value":text, "type":"Rich Text", lang: languageId});

								// this brand new or a subsequent edit?									
								var content_id = ((new_field.attr('id') === '' || new_field.attr('id') === undefined) ? null : new_field.attr('id'));

	 							$.ocms.saveContent({"name":"Text", "content_id":content_id,"content_type":"DetailField","parent_id":"{!content.Id}"},
									attributes,
									"{!JSENCODE(Content.Site_Name__c)}",
									function(json) {
										if (content_id === null) loading.remove();
										var theId = json.success.message.c.Id;	// response from saveContent is more complicated these days!
										new_field.attr('id', theId);
										new_field.find('.sample').html(text);

										var edit = $('<a title="Edit Item" onclick="return false;" href="#" class="edit"><img alt="Edit" title="Edit Item" border="0" src="'+$(document).data('editBtn')+'" /></a>');
										new_field.find('.ocms-actions').append(edit);

										_setupDelete(new_field.find('.delete'));
										_setupEdit(new_field.find('.edit'));

										te.setupTableDraggables(new_field);
										cell.append(new_field);

										// if the content id was null then we need to mirror new field to the other frame
										if (content_id === null) {
											var theCell = {"row": cell.data('row'), "col": cell.data('col')};
											self.mirror.action('newTextField', {"theCell": theCell, "mirrorField": new_field});
										}

	
									},
								'{!token}');
							} // end of "saveText"
						});

						new_field.ocmsTextField('launchTextEditDialog');

					} else {
						attributes.push({"name":"Type", "value":'Field', "type":"Text"});
						attributes.push({"name":"Label", "value":ui.draggable.ocmsDetailField('getLabel'), "type":"Text"});
						attributes.push({"name":"RelationshipName", "value":ui.draggable.ocmsDetailField('getRelationshipName'), "type":"Text"});
						attributes.push({"name":"ReferenceTo", "value":ui.draggable.ocmsDetailField('getReferenceTo'), "type":"Text"});

						$.ocms.saveContent({"name":ui.draggable.attr('id'), "content_id":null,"content_type":"DetailField","parent_id":"{!content.Id}"},
							attributes,
							"{!JSENCODE(Content.Site_Name__c)}",
							function(json) {
								loading.remove();
								var theId = json.success.message.c.Id;	// response from saveContent is more complicated these days!
								new_field.attr('id', theId);

								_setupDelete(new_field.find('.delete'));

								new_field.find('.sample').html(ui.draggable.ocmsDetailField('getLabel'));
								new_field.find('.sample').addClass('detail-field');

								var theCell = {"row": cell.data('row'), "col": cell.data('col')};
								self.mirror.action('newDetailField', {"theCell": theCell, "mirrorField": new_field});

							},

						'{!token}');

						te.setupTableDraggables(new_field);
						cell.append(new_field);
					}
				} // _createNewField

				
				// mirror of adding a new text field
				function _mirrorNewTextField(mObject) {
					var cell = $('#tablelayout').table_editor('getCell', mObject.theCell.row, mObject.theCell.col);
					var new_field = mObject.mirrorField.clone();
					new_field.find('.sample').html('');
					// cloning from one frame's DOM to the other - convert to HTML!
					new_field.wrap('<div>');
					var nfHTML = new_field.parent().html();
					new_field = $(nfHTML);
					_setupDelete(new_field.find('.delete'));
					_setupEdit(new_field.find('.edit'));
					$('#tablelayout').table_editor('setupTableDraggables', new_field);
					cell.append(new_field);
				} // _mirrorNewTextField				


				// mirror of adding a new record detail field
				function _mirrorNewDetailField(mObject) {
					var cell = $('#tablelayout').table_editor('getCell', mObject.theCell.row, mObject.theCell.col);
					var new_field = mObject.mirrorField.clone();
					// cloning from one frame's DOM to the other - convert to HTML!
					new_field.wrap('<div>');
					var nfHTML = new_field.parent().html();
					new_field = $(nfHTML);
					_setupDelete(new_field.find('.delete'));
					$('#tablelayout').table_editor('setupTableDraggables', new_field);
					cell.append(new_field);
				} // _mirrorNewDetailField				


				// mirror of moving a text or record detail field
				function _mirrorMoveField(mObject) {
					var cell = $('#tablelayout').table_editor('getCell', mObject.theCell.row, mObject.theCell.col);
					var existing_field = $('#'+mObject.fieldId);
					var new_field = existing_field.clone();	
					existing_field.remove();
					_setupDelete(new_field.find('.delete'));
					_setupEdit(new_field.find('.edit'));
					$('#tablelayout').table_editor('setupTableDraggables', new_field);
					cell.append(new_field);
				} // _mirrorMoveField				


				// text fields delete handler
				function _setupDelete($sel) {
					$sel.click(function(){
						var field_id = $(this).parent().parent().parent().attr('id');
						$.ocms.deleteContent(field_id, function(){
							$('#'+field_id).remove();
						}, '{!token}');
						
						self.mirror.action('delete', {"field_id" : field_id});
					});
				} // _setupDelete

				
				function _mirrorDelete(mObject) {
					$('#'+mObject.field_id).remove();
				} // _mirrorDelete

				
				// text fields edit handler					
				function _setupEdit($sel) {
					$sel.click(function(){
						 var field = $(this).parent().parent().parent();
						 var field_id = field.attr('id');	
						
						 $(field).ocmsTextField({
						 	content: field.find('.sample').html(),
						 	saveText: function(text) {
						 		var attributes = [];
	 							attributes.push({"name":"Type", "value":"Text", "type":"Text", "lang": ""});
	 							attributes.push({"name":"Content", "value":text, "type":"Rich Text", lang: languageId});
	
			 					$.ocms.saveContent({"name":"Text", "content_id":field_id,"content_type":"DetailField","parent_id":"{!content.Id}"},
									attributes,
									"{!JSENCODE(Content.Site_Name__c)}",
									function(json) {
										field.find('.sample').html(text);
									},
									'{!token}');
	 							}
	 						});
						 $(field).ocmsTextField('launchTextEditDialog');
					});
				} // _setupEdit
				
			});
		</script>
	</head>

	<div class="record-detail-editor">
		<div class="help-text">
			Select the Salesforce object and then drag and drop fields onto the record detail layout grid.<br />
			Right-click the grid to add and remove rows and columns, and merge and split cells.<br /><br />
		</div>
	
		<table>
		  <tr>
		    <td valign="top">
			  <div id="tablelayout">
	
			    <table style="{!detailTable.tableStyles}">
				  <tbody>
				    <apex:repeat value="{!DetailRows}" var="row">
					  <tr>
					    <apex:repeat value="{!row.columns}" var="column">
						  <td style="{!column.col.style}" colspan="{!column.col.colspan}" rowspan="{!column.col.rowspan}">
						  	<apex:outputText rendered="{!!ISNULL(column.field)}">
								<div id="{!column.field.c.Id}" class="text-item tableitem">
			  						<div class="tableitem-hover">
										<div class="ocms-actions">
											<a onclick="return false;" href="#" class="delete" ><img border="0" alt="Remove" src="{!URLFOR($Resource.CmsImages,'/btn_remove.png')}" /></a>
											<apex:outputText escape="false" rendered="{!column.field.c.cms__Name__c == 'Text'}">
												<a onclick="return false;" href="#" class="edit" ><img border="0" alt="Edit" src="{!URLFOR($Resource.CmsImages,'/btn_edit.png')}" /></a>	
											</apex:outputText>
										</div>
										<div class="tableitem-handle" style="border: none;"><span class="ui-icon ui-icon-arrow-4"></span></div>
									</div>
									<div class="tableitem-cell sample {!IF(column.field.c.Name__c == 'Text', '', 'detail-field')}">
										<apex:outputText escape="false" value="{!IF(column.field.label == 'null', '', column.field.label)}" />
									</div>
									<div style="clear: both;"></div>
			 					</div>
						  	</apex:outputText>
						  </td>
						</apex:repeat>
				 	  </tr>
					</apex:repeat>
				  </tbody>
				</table>
	
			  </div>
		    </td>
		    <td valign="top">
		      <div id="objectfields">
		        <table>
		      	  <tr>
		            <td style="width:120px;">Salesforce Object</td>
				    <td>
		                <apex:outputText escape="false" rendered="{!content.cms__Published__c}">
			                <select name="SObjectType" id="SOjbectType" disabled="disabled">
			                	<apex:repeat value="{!objectSelectOptions}" var="o">
				                	<apex:outputText escape="false" rendered="{!o.selected}">
				                		<option value="{!o.so.Value}" selected="selected"><apex:outputText value="{!o.so.Label}" /></option>
				                	</apex:outputText>
				                	<apex:outputText escape="false" rendered="{!!o.selected}">
				                	 	<option value="{!o.so.Value}"><apex:outputText value="{!o.so.Label}" /></option>
				                	</apex:outputText>
			                	</apex:repeat>
			                </select>
			             </apex:outputText>
		                 <apex:outputText escape="false" rendered="{!!content.cms__Published__c}">
			                <select name="SObjectType" id="SObjectType">
			                	<apex:repeat value="{!objectSelectOptions}" var="o">
				                	<apex:outputText escape="false" rendered="{!o.selected}">
				                		<option value="{!o.so.Value}" selected="selected"><apex:outputText value="{!o.so.Label}" /></option>
				                	</apex:outputText>
				                	<apex:outputText escape="false" rendered="{!!o.selected}">
				                	 	<option value="{!o.so.Value}"><apex:outputText value="{!o.so.Label}" /></option>
				                	</apex:outputText>
			                	</apex:repeat>
			                </select>
			              </apex:outputText>
					  </td>
					</tr>
					<tr>
						<td colspan="2">
							<div id="elementOptionAccordion" style="width: 397px; padding:0px; float: left; margin-right: 8px; display: none;">
								<h3 id="detail-elements-hdr"><a href="#">Detail Elements</a></h3>
								<div id="detail-elements">
									 <ul class="available_container ui-sortable" style="width: 100%">
										<li class="sortitem tableitem ocms-field-item" id="Text">
											<span class="handle ocms-draghandle"><img src="{!URLFOR($Resource.jqueryui, '/css/images/cleardot.gif')}" border="0" /></span>
											<span class="draggable-label" title="Text">Text</span>
										</li>
									</ul>
								</div>
							</div>
						</td>
					</tr>
		        </table>
		      </div>
		    </td>
		  </tr>
		</table>
	</div>
</apex:page>